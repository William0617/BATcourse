package BATcourse.Chapter5;

/**
 * 环形链表插值：
 * 有一个整数val，如何在节点值有序的环形链表中插入一个节点值为val的节点，并且保证这个环形单链表依然有序。
 * 给定链表的信息，及元素的值A及对应的nxt指向的元素编号同时给定val，请构造出这个环形链表，并插入该值。
 */

/**
 * 解题思路：
 * 1. 首先生成结点值为num的新结点；
 * 2. 若为空，自己为链表；
 * 3. 若不为空， 则用两个指针previous和current，同时移动；
 * 4. 若遇到previous小于num，而current大于num，则插入之间；
 * 5. 若没有发生4，则将num放在head前面；
 * 6. 返回最小的head;
 */
public class InsertValue {
    public ListNode insert(int[] A, int[] nxt, int val) {
        // write code here
        ListNode node = new ListNode(val);
        if (A.length == 0 || nxt.length == 0) {
            node.next = node;
            return node;
        }
        //构造环形链表
        ListNode head = new ListNode(A[0]);
        ListNode tmp = head;
        for (int i = 0; i < A.length - 1; i++) {
            tmp.next = new ListNode(A[nxt[i]]);
            tmp = tmp.next;
        }
        //
        ListNode previous = head;
        ListNode current = head.next;

        while (current != null) {
            if (val >= previous.val && val < current.val) {
                previous.next = node;
                node.next = current;
                return head;
            }
            previous = previous.next;
            current = current.next;
        }
        if (node.val < head.val){
            node.next = head;
            previous.next = null;
            return node;
        }
        node.next = null;  // 将尾节点的下一个节点赋值为 null，而不是 hNode，反而通过了测试。。。
        previous.next = node;
        return head;
    }

    public static void main(String[] args) {
        InsertValue insertValue = new InsertValue();
        int[] a = {3, 5, 9, 11, 14, 17, 20, 20, 24, 27, 31, 32, 36, 38, 40, 41, 44, 45, 48, 51, 55, 56, 56, 58, 61, 65, 69, 72, 74, 76, 76, 80, 84, 88, 89, 89, 92, 96, 97, 98, 98, 98, 101, 103, 103, 106, 108, 108, 110, 114, 117, 120, 121, 125, 129, 130, 130, 132, 136, 136, 138, 142, 146, 150, 151, 153, 153, 157, 161, 165, 168, 172, 173, 176, 178, 180, 183, 185, 188, 188, 188, 191, 193, 195, 198, 199, 202, 204, 206, 208, 209, 211, 215, 218, 218, 222, 223, 225, 228, 232, 235, 239, 240, 241, 243, 247, 251, 254, 255, 255, 258, 258, 262, 265, 267, 267, 268, 272, 276, 276, 278, 282, 284, 287, 288, 292, 292, 294, 297, 300, 300, 301, 303, 306, 306, 309, 311, 313, 316, 317, 320, 322, 326, 327, 330, 330, 333, 335, 339, 339, 339, 340, 343, 346, 346, 348, 348, 348, 349, 351, 352, 356, 358, 359, 360, 363, 364, 368, 371, 375, 379, 379, 380, 384, 388, 390, 391, 393, 394, 395, 399, 403, 405, 406, 407, 409, 409, 410, 414, 414, 417, 419, 422, 426, 427, 431, 432, 435, 435, 436, 439, 443, 444, 445, 446, 449, 453, 457, 458, 460, 461, 462, 466, 469, 473, 474, 477, 478, 479, 480, 480, 480, 483, 486, 486, 487, 490, 493, 496, 498, 499, 500, 501, 504, 507, 511, 513, 514, 518, 518, 522, 524, 526, 527, 531, 535, 536, 540, 540, 543, 546, 549, 551, 552, 554, 555, 559, 562, 566, 570, 573, 574, 576};
        int[] b = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 0};
        int c = 595;
        insertValue.insert(a, b, c);
    }
}

class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}